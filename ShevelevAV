# Основные команды Git
* git config --global user.name - ввод отображаемого имени
* git config --global user.email - ввод отображаемой электронной почты
* git init – инициализация локального репозитория
* git status – получить информацию от git о его текущем состоянии
* git add – добавить файл или файлы к следующему коммиту
* git commit -m "message" – создание коммита
* git commit -am (или -a -m) - объединяет команду git add и git commit -m, можно выполнять после первого выполнения git add
* git log – вывод на экран истории всех коммитов с их хеш-кодами
* git log --graph - выводит историю всех коммитов со схематичной структурой веток
* git checkout – переход от одного коммита к другому
* git checkout -b name - создает и переходит на ветку name (-b = branch)
* git checkout master – вернуться к актуальному состоянию и продолжить работу
* git diff – увидеть разницу между текущим файлом и закоммиченным файлом
* git branch - показывает все созданые ветки в репозитории
* git branch name - создание новой ветки name
* git branch -d name - удаление ветки name (-d - delete)
* git merge name - переносит информацию из ветки name в текущую ветку
* cd имя папки - назначает директорию для Git (cd = change directory)
* clear - очистка экрана терминала
## Работа с локальными репозиториями
* git clone ссылка - копирует готовый репозиторий по ссылке
* git remote add origin ссылка - отправить локальный репозиторий Git и поделиться им с другим разработчиком в облачной распределенной службе контроля версий(GitHub, GitLab и др.)
* git branch -m main - назначить основную ветку текущему файлу
* git push -u origin main - отправить изменения в облачную распределенную службу контроля версий(при первичном отправлении необходимо авторизироваться в браузере по умолчанию)
* git pull - загрузить актуальные изменения в текущий репозиторий из облачной распределенной службы контроля версий(делает merge, если есть изменения)


# Синтаксис языка Markdown
* #Заголовок – выделение заголовков. Количество символов “#” задаёт уровень заголовка
(поддерживается 6 уровней).
* = или - – подчёркиванием этими символами (не менее 3 подряд) выделяют заголовки
первого (“=”) и второго (“-”) уровней.
* ** Полужирное начертание** или __ Полужирное начертание__
* *Курсивное начертание * или _Курсивное начертание _
* *** Полужирное курсивное начертание ** *
* ~~Зачеркнутый текст~ ~
* *Строка – ненумерованные списки, символ «\*» в начале строки
* 1, 2, 3 … – нумерованные списки

# Добавление изображения
Для добавления изображения в текст необходимо разместить файл с изображением в текущей папке Git и воспользоваться командой:

![сдесь указываем текст, который отобразиться, если картинка не загрузится] имя_файла.расширение

# Игнорирование файла
Для игнорирования какого-либо файла необходимо создать новый файл с именем .gitignore. Далее заходим в этот файл и указываем имя файла с расширением, который мы хотим игнорировать. После чего проводим команды git add .gitignore и git checkout